{"version":3,"sources":["components sync /.png$","components/Button.tsx","components/Card.tsx","components/Timer.tsx","Main.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Button","props","className","activeClass","onClick","number","label","children","Card","flipClass","Timer","interval","useState","seconds","setSeconds","isActive","setIsActive","useEffect","setInterval","clearInterval","Main","numbers","numberCard","setNumberCard","isFlipped","setIsFlipped","idCards","setIdCards","length","i","push","array","counter","index","Math","floor","random","temp","shuffle","toString","split","Buttons","map","key","toggleClass","renderBtns","Cards","Images","categorie","Img","src","url","alt","slice","renderImg","memoryImages","fruits_legumes","renderCards","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.e285e2e5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 2;","import React from 'react'\r\n\r\ntype ButtonProps = {\r\n    label?: string;\r\n    number?: number;\r\n    activeClass:string;\r\n    onClick: (event) => void;\r\n}\r\n\r\n\r\nconst Button: React.FC<ButtonProps> = (props: React.PropsWithChildren<ButtonProps>) =>{\r\n\r\n    return(\r\n        <button className={props.activeClass +' _border-primary _text-primary _leading-normal _border-solid _border _bg-transparent _mx-xxs _rounded-small _shadow-none _py-xxs'} onClick={props.onClick}>\r\n            <span className=\"_block\">{props.number && props.number }</span>    \r\n            <span className=\"_block\">{props.label && props.label}</span>    \r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\n// _border-primary _text-primary _leading-normal _border-solid _border _bg-transparent _mx-xxs _rounded-small _shadow-none _py-xxs\r\nexport default Button","import React from 'react';\r\n\r\ntype CardProps = {\r\n    // label?: string;\r\n    cardNumber?: number;\r\n    flipClass?: string;\r\n    id?: string | undefined;\r\n    onClick?: (event) => void;\r\n    // activeClass:string;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = (props: React.PropsWithChildren<CardProps>) => {\r\n\r\n    return (\r\n        <button  className={props.flipClass && props.flipClass+\" card\"} id={props.id} onClick={props.onClick && props.onClick}>\r\n            {/* <img className=\"_block\"></img>     */}\r\n            {props.children}\r\n        </button>\r\n    );\r\n};\r\n\r\n// _border-primary _text-primary _leading-normal _border-solid _border _bg-transparent _mx-xxs _rounded-small _shadow-none _py-xxs\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n// type TimerProps = {\r\n    // hours: number;\r\n    // minutes: number;\r\n    // seconds?: number;0.\r\n\r\n    // onClick?: (event) => void;\r\n// };\r\n\r\n\r\nconst Timer: React.FC = () => {\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    var interval: any;\r\n    \r\n      function toggle() {\r\n        setIsActive(!isActive);\r\n      }\r\n    \r\n      function reset() {\r\n        setSeconds(0);\r\n        setIsActive(false);\r\n      }\r\n    \r\n      useEffect(() => {\r\n        if (isActive) {\r\n            interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n      }, [isActive, seconds]);\r\n    return (\r\n    // <span>{props.hours+props.minutes+':'+props.seconds}</span>\r\n    <div>\r\n        <span>{seconds}</span>\r\n        <button className={`button button-primary button-primary-${isActive ? 'active' : 'inactive'}`} onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n        <button className=\"button\" onClick={reset}>Reset</button>\r\n\r\n    </div>\r\n    );\r\n};\r\n\r\n// _border-primary _text-primary _leading-normal _border-solid _border _bg-transparent _mx-xxs _rounded-small _shadow-none _py-xxs\r\nexport default Timer;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nimport memoryImages from './assets/images.json'\r\nimport { Button, Card, Timer } from './components';\r\nimport './styles/tailwind.css';\r\nimport './styles/memory.scss';\r\n\r\nconst Main = () => {\r\n    \r\n\r\n    let numbers = [12, 16, 20, 24, 26];\r\n\r\n    // On type useState quand il y a deux types possible.\r\n    // const [state, setState] = useState(\"0\");\r\n    const [numberCard, setNumberCard] = useState(numbers[0]);\r\n    const [isFlipped, setIsFlipped] = useState(); \r\n    const [idCards, setIdCards] = useState<any>([]); \r\n    // const [arrayPair, setArrayPair] = useState<number[]>([]); \r\n    \r\n    function toggleClass(index: number) {\r\n        setNumberCard(numbers[index]);\r\n    }\r\n    \r\n    function flipCard(index: number){\r\n        setIsFlipped(index)\r\n        return index;\r\n    }\r\n\r\n    // function addCard(index: number) {\r\n    //     setArrayPair([...arrayPair, index])\r\n    // }\r\n    // console.log(arrayPair)\r\n\r\n    function renderBtns() {\r\n        const Buttons: JSX.Element[] = [];\r\n        numbers &&\r\n            numbers.map((number, index) => {\r\n                Buttons.push(\r\n                    <Button\r\n                        key={index}\r\n                        label={'cartes'}\r\n                        number={number}\r\n                        activeClass={numberCard === numbers[index] ? '_bg-primary _text-nearwhite' : ''}\r\n                        onClick={() => {\r\n                            toggleClass(index);\r\n                        }}\r\n                    />\r\n                );\r\n            });\r\n        return <div>{Buttons}</div>;\r\n    }\r\n\r\n    /**\r\n     * Permet de rendre  par categorie la moitié d'un nombre d'image définie.\r\n     * @param categorie \r\n     * @param number \r\n     */\r\n    function renderImg(categorie: any, number: number){\r\n        const Img: JSX.Element[] = [];\r\n        for (let index = 0; index < number/2; index++) {\r\n            Img.push(<img className=\"_h-full\" src={categorie[index].url} key={\"image-\"+categorie[index].id} alt=\"ok\"></img>)\r\n        }\r\n        return (Img.slice(0, number/2))\r\n    }\r\n\r\n    /**\r\n     * Permet de randomize la position des valeurs dans le tableau\r\n     * @param {Array} array\r\n     */\r\n    function shuffle(array) {\r\n        let counter = array.length;\r\n\r\n        // While there are elements in the array\r\n        while (counter > 0) {\r\n            // Pick a random index\r\n            let index = Math.floor(Math.random() * counter);\r\n\r\n            // Decrease counter by 1\r\n            counter--;\r\n\r\n            // And swap the last element with it\r\n            let temp = array[counter];\r\n            array[counter] = array[index];\r\n            array[index] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * UseEffect sert ici à obsever le changment de idCards, uniquement si il y a eu un changement au niveau de numberCard\r\n     * Array d'ids en fonction du nombre de cards et shuffle \r\n     */\r\n    useEffect(() => {\r\n        setIdCards(idCards.length = 0);\r\n\r\n        for (let i = 0; i < numberCard/2; i++)  {\r\n            setIdCards(idCards.push(i))\r\n        };\r\n\r\n        setIdCards(idCards.push(...idCards))\r\n        setIdCards(shuffle(idCards))\r\n        setIdCards(idCards.toString().split(','))\r\n\r\n    }, [numberCard])\r\n\r\n    /**\r\n     * \r\n     */\r\n    function renderCards() {\r\n        const Cards: JSX.Element[] = [];\r\n        const Images = renderImg(memoryImages.fruits_legumes, numberCard)\r\n        \r\n        for (let i = 0; i < numberCard; i++)  {\r\n            // Si au moment ou je click sur le bouton (call de flipCard(i) qui change isFlipped) c'est le meme chiffre que i, alors...\r\n            Cards.push(\r\n            <Card flipClass={ isFlipped === i ? \"-isFlipped\" : \"_bg-primary\"} key={i} id={idCards[i]} onClick={()=> { flipCard(i)}}> \r\n            {/* TO DO : ne retroune pas les bon element par rapport a l'ID voir pourquoi  */}\r\n                {Images[idCards[i]]}\r\n            </Card>)\r\n        };\r\n\r\n        return (<div className=\"grid-card\">{Cards}</div>)\r\n    }\r\n\r\n    // /**\r\n    //  * Verifie la correspondance des valeurs des ids lorsque deux items sont selectionnés\r\n    //  * @param {cards} length - Nombre d'éléments dans le tableau this.pair.\r\n    //  * @param {Number} length - Nombre d'éléments dans le tableau this.pair.\r\n    //  */\r\n    // function checkPairs(length, cards) {\r\n    //     if (length === 2) {\r\n    //         // clickNumber++;\r\n    //         // this.clickDisplay.textContent = this.clickNumber;\r\n\r\n    //         if (arrayPair[0] === arrayPair[1]) {\r\n    //             this.pair.forEach((pair) => {\r\n    //                 this._setAttributeCard(pair, 'disabled');\r\n    //                 pair.setAttribute('tabindex', '-1');\r\n    //                 pair.classList.add('_pointer-event-none')\r\n\r\n    //             });\r\n    //             this.checkWin.push(this.pair);\r\n\r\n    //             if (this.checkWin.length === this.level / 2) {\r\n    //                 this._winGame(this.timeNumber, this.clickNumber);\r\n    //             }\r\n    //             this.pair = [];\r\n    //         } else {\r\n    //             setTimeout(() => {\r\n    //                 cards.forEach((card) => {\r\n    //                     this._setAttributeCard(card, 'hidden')\r\n    //                 });\r\n    //                 this.pair = [];\r\n\r\n    //             }, 500);\r\n    //         }\r\n    //     } else if (length > 2) {\r\n    //         //Securité, pour ne pas a avoir plus de 2 cards dans le tableau \"this.pair\".\r\n    //         cards.forEach((card) => {\r\n    //             this._setAttributeCard(card, 'hidden')\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"memory-bg\">\r\n            <div>{renderBtns()}</div>\r\n            <div>{renderCards()}</div>\r\n            <div><Timer/></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport Main from './Main'\r\n\r\nfunction App(){\r\n  return(<Main/>)\r\n}\r\nReactDom.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}