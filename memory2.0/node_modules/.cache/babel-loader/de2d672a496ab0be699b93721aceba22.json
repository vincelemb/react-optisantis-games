{"ast":null,"code":"import { useEffect, useContext } from 'react';\nimport { TimerContext } from '../context/TimerContext';\nexport default function useScoreTimer(timeActive, timerInterval) {\n  const _useContext = useContext(TimerContext),\n        seconds = _useContext.seconds,\n        setSeconds = _useContext.setSeconds;\n\n  useEffect(() => {\n    if (setSeconds) {\n      if (timeActive) {\n        timerInterval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n      } else if (!timeActive && seconds !== 0 && timerInterval) {\n        clearInterval(timerInterval);\n      }\n\n      return () => {\n        if (timerInterval) clearInterval(timerInterval);\n      };\n    }\n\n    return;\n  }, [timeActive, seconds]);\n  return {\n    seconds\n  };\n}","map":{"version":3,"sources":["C:/Users/dev7/Desktop/Outils/memory2.0/src/logics/useScoreTimer.tsx"],"names":["useEffect","useContext","TimerContext","useScoreTimer","timeActive","timerInterval","seconds","setSeconds","setInterval","clearInterval"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAEA,eAAe,SAASC,aAAT,CAAuBC,UAAvB,EAA4CC,aAA5C,EAAuF;AAAA,sBACnEJ,UAAU,CAACC,YAAD,CADyD;AAAA,QAC1FI,OAD0F,eAC1FA,OAD0F;AAAA,QACjFC,UADiF,eACjFA,UADiF;;AAGlGP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,UAAJ,EAAgB;AACZ,UAAIH,UAAJ,EAAgB;AACZC,QAAAA,aAAa,GAAGG,WAAW,CAAC,MAAM;AAC9BD,UAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;AACH,SAF0B,EAExB,IAFwB,CAA3B;AAGH,OAJD,MAIO,IAAI,CAACF,UAAD,IAAeE,OAAO,KAAK,CAA3B,IAAgCD,aAApC,EAAmD;AACtDI,QAAAA,aAAa,CAACJ,aAAD,CAAb;AACH;;AACD,aAAO,MAAM;AACT,YAAIA,aAAJ,EAAmBI,aAAa,CAACJ,aAAD,CAAb;AACtB,OAFD;AAGH;;AACD;AACH,GAdQ,EAcN,CAACD,UAAD,EAAaE,OAAb,CAdM,CAAT;AAgBA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH","sourcesContent":["import { useEffect, useContext } from 'react';\r\nimport { TimerContext } from '../context/TimerContext';\r\n\r\nexport default function useScoreTimer(timeActive: boolean, timerInterval: NodeJS.Timeout | undefined) {\r\n    const { seconds, setSeconds} = useContext(TimerContext);\r\n\r\n    useEffect(() => {\r\n        if (setSeconds) {\r\n            if (timeActive) {\r\n                timerInterval = setInterval(() => {\r\n                    setSeconds((seconds) => seconds + 1);\r\n                }, 1000);\r\n            } else if (!timeActive && seconds !== 0 && timerInterval) {\r\n                clearInterval(timerInterval);\r\n            }\r\n            return () => {\r\n                if (timerInterval) clearInterval(timerInterval);\r\n            };\r\n        }\r\n        return;\r\n    }, [timeActive, seconds]);\r\n    \r\n    return { seconds };\r\n}"]},"metadata":{},"sourceType":"module"}