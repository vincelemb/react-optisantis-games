{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\dev7\\\\Desktop\\\\Outils\\\\memory2.0\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\dev7\\\\Desktop\\\\Outils\\\\memory2.0\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\dev7\\\\Desktop\\\\Outils\\\\memory2.0\\\\src\\\\Main.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//HOOKS\nimport React, { useState, useEffect, useContext } from 'react'; //ASSETS\n\nimport memoryImages from './assets/images.json';\nimport memoryClick from \"./assets/memory/clics.svg\";\nimport memoryTime from \"./assets/memory/time.svg\"; //COMPONENTS\n\nimport { Button, Card, Confetti, ScoreClick, Popup, Container, Layout, Tab } from './components'; //SVG COOMPONENTS\n// import { starSvg } from './components/svg';\n//TYPES\n\n//STYLE\nimport './styles/tailwind.css';\nimport './styles/memory.scss';\nimport './styles/confetti.scss'; //LOGICS\n\nimport useScoreTimer from './logics/useScoreTimer'; //UTILS\n\nimport TimeFormat from './utils/TimeFormat'; //UseContext\n\nimport { TimerContext } from './context/TimerContext';\n\nconst Main = () => {\n  let numbers = [12, 16, 20, 24, 28];\n  let themes = {\n    fruits_legumes: 'Fruit et Légumes',\n    medical: 'Médical',\n    meteo: 'Météo',\n    sommeil: 'Sommeil',\n    sport: 'Sport'\n  };\n\n  const _useState = useState(numbers[0]),\n        _useState2 = _slicedToArray(_useState, 2),\n        numberCard = _useState2[0],\n        setNumberCard = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isFlipped = _useState4[0],\n        setIsFlipped = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        winPairs = _useState6[0],\n        setWinPairs = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        idCards = _useState8[0],\n        setIdCards = _useState8[1];\n\n  const _useState9 = useState(themes.fruits_legumes),\n        _useState10 = _slicedToArray(_useState9, 2),\n        images = _useState10[0],\n        setImages = _useState10[1];\n\n  const _useState11 = useState(memoryImages.fruits_legumes),\n        _useState12 = _slicedToArray(_useState11, 2),\n        imagesArray = _useState12[0],\n        setImagesArray = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        currentPair = _useState14[0],\n        setCurrentPair = _useState14[1];\n\n  const _useState15 = useState(0),\n        _useState16 = _slicedToArray(_useState15, 2),\n        count = _useState16[0],\n        setCount = _useState16[1];\n\n  const _useState17 = useState(false),\n        _useState18 = _slicedToArray(_useState17, 2),\n        timeActive = _useState18[0],\n        setTimeActive = _useState18[1];\n\n  const _useState19 = useState([]),\n        _useState20 = _slicedToArray(_useState19, 2),\n        saveScore = _useState20[0],\n        setSaveScore = _useState20[1];\n\n  const _useState21 = useState(true),\n        _useState22 = _slicedToArray(_useState21, 2),\n        isModlaHide = _useState22[0],\n        setIsModlaHide = _useState22[1];\n\n  const _useState23 = useState(saveScore.findIndex(index => index.level === numberCard)),\n        _useState24 = _slicedToArray(_useState23, 2),\n        indexLevel = _useState24[0],\n        setIndexLevel = _useState24[1];\n\n  let timerInterval = undefined;\n\n  const _useScoreTimer = useScoreTimer(timeActive, timerInterval),\n        seconds = _useScoreTimer.seconds;\n\n  const _useContext = useContext(TimerContext),\n        setSeconds = _useContext.setSeconds,\n        setMinutes = _useContext.setMinutes;\n\n  const _useState25 = useState(true),\n        _useState26 = _slicedToArray(_useState25, 2),\n        activeTab = _useState26[0],\n        setActiveTab = _useState26[1];\n\n  const _useState27 = useState(true),\n        _useState28 = _slicedToArray(_useState27, 2),\n        pannelLeft = _useState28[0],\n        setPannelLeft = _useState28[1];\n\n  const Cards = [];\n  /**\r\n   * UseEffect sert ici à obsever le changment de idCards, uniquement si il y a eu un changement au niveau de numberCard\r\n   * Array d'ids en fonction du nombre de cards et shuffle\r\n   */\n\n  useEffect(() => {\n    setIdCards(idCards.length = 0);\n\n    for (let i = 0; i < numberCard / 2; i++) {\n      setIdCards(idCards.push(i));\n    }\n\n    setIdCards(idCards.push(...idCards));\n    setIdCards(shuffle(idCards));\n    setIdCards(idCards.toString().split(','));\n  }, [numberCard, imagesArray]);\n  /**\r\n   * Check la concordance des deux cards selectionnées\r\n   */\n\n  useEffect(() => {\n    if (isFlipped.length > 2) {\n      setIsFlipped([]);\n    }\n\n    if (currentPair.length === 2 && isFlipped[0] !== isFlipped[1]) {\n      setCount(count + 1);\n\n      if (currentPair[0] === currentPair[1]) {\n        setWinPairs(winPairs.concat(currentPair));\n        setCurrentPair([]);\n        setIsFlipped([]);\n      } else {\n        setCurrentPair([]);\n        setTimeout(() => {\n          setIsFlipped([]);\n        }, 500);\n      }\n    } else if (currentPair.length > 2) {\n      setCurrentPair([]);\n    } else if (isFlipped[0] === isFlipped[1]) {\n      setCurrentPair([]);\n    }\n  }, [isFlipped]);\n  useEffect(() => {\n    if (winPairs.length === numberCard) {\n      setIsModlaHide(false);\n      timerStatus(false); // Arrete le Timer\n\n      if (indexLevel !== -1) {\n        // La, on créer un \"saveScore\" temporaire en lui passant les nouvelle valeurs qui viennent d'être joué. Pour ensuite comparer saveScore et tempSaveScore\n        const tempSaveScore = [...saveScore];\n\n        if (count < saveScore[indexLevel].click) {\n          /*Ici, on dit a tempSaveScore -> à l'élement de indexLevel (ici 12) tu vas suprimer 1 element, et le remplacer par \r\n          l'objet tempSaveScore à l'indexLevel dont la valeur click cahnge pour le nouveau count (il changer automatiquement pour la nouvel clé \"click\").\r\n          */\n          tempSaveScore.splice(indexLevel, 1, _objectSpread({}, tempSaveScore[indexLevel], {\n            click: count\n          }));\n        }\n\n        if (seconds < saveScore[indexLevel].time) {\n          tempSaveScore.splice(indexLevel, 1, _objectSpread({}, tempSaveScore[indexLevel], {\n            time: seconds\n          }));\n        }\n\n        if (count < saveScore[indexLevel].click || seconds < saveScore[indexLevel].time) setSaveScore(tempSaveScore);\n      } else {\n        setSaveScore([...saveScore, {\n          level: numberCard,\n          click: count,\n          time: seconds\n        }]);\n      }\n    }\n  }, [winPairs]); // useEffect(() => {\n  //     console.log(saveScore)\n  // }, [saveScore]);\n\n  useEffect(() => {\n    setIndexLevel(saveScore.findIndex(index => index.level === numberCard));\n  }, [reset]);\n\n  function toggleClass(index) {\n    setNumberCard(numbers[index]);\n    renderImg(imagesArray, numbers[index]);\n  }\n\n  function changetheme(value) {\n    setImagesArray(memoryImages[value]);\n    renderImg(imagesArray, numberCard);\n  }\n\n  function reset() {\n    setWinPairs([]);\n    setIsFlipped([]);\n    setCurrentPair([]);\n    setCount(0);\n    setSeconds(0);\n    setMinutes(0);\n    setIsModlaHide(true);\n  }\n\n  function renderLevelBtns() {\n    const Buttons = [];\n    numbers && numbers.map((number, index) => {\n      Buttons.push(React.createElement(Button, {\n        key: index,\n        label: 'cartes',\n        number: number,\n        activeClass: numberCard === numbers[index] ? '_bg-primary _text-white' : '_text-primary _border-primary',\n        onClick: () => {\n          toggleClass(index);\n          reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"_flex _flex-wrap _justify-center _px-md _py-sm _rounded-small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, Buttons);\n  }\n\n  function renderThemeBtns() {\n    const ButtonsTheme = [];\n    Object.keys(themes).map((key, value) => {\n      ButtonsTheme.push(React.createElement(Button, {\n        key: key,\n        label: themes[key],\n        activeClass: images === themes[key] ? '_bg-white _text-primary' : '_text-white _border-white',\n        onClick: () => {\n          setImages(themes[key]);\n          changetheme(Object.keys(themes)[value]);\n          reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"_flex _justify-center _px-md _py-sm _rounded-small _flex-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, ButtonsTheme);\n  }\n  /**\r\n   * Permet de rendre  par categorie la moitié d'un nombre d'image définie.\r\n   * @param categorie\r\n   * @param number\r\n   */\n\n\n  function renderImg(categorie, number) {\n    const Img = [];\n    let urlArray = Object.values(categorie);\n\n    for (let index = 0; index < number / 2; index++) {\n      Img.push(React.createElement(\"img\", {\n        className: \"_h-full\",\n        src: urlArray[index],\n        key: 'image-' + index,\n        alt: \"ok\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }));\n    }\n\n    return Img.slice(0, number / 2);\n  }\n  /**\r\n   * Permet de randomize la position des valeurs dans le tableau\r\n   * @param {Array} array\r\n   */\n\n\n  function shuffle(array) {\n    // let counter = array.length;\n    // // While there are elements in the array\n    // while (counter > 0) {\n    //     // Pick a random index\n    //     let index = Math.floor(Math.random() * counter);\n    //     // Decrease counter by 1\n    //     counter--;\n    //     // And swap the last element with it\n    //     let temp = array[counter];\n    //     array[counter] = array[index];\n    //     array[index] = temp;\n    // }\n    return array;\n  }\n  /**\r\n   * Animation confetti lors du remplissage de la victoire de l'utilisateur\r\n   */\n\n\n  function renderConfetti() {\n    const Confettis = [];\n    let i = 300;\n\n    if (winPairs.length === numberCard) {\n      while (i > -1) {\n        Confettis.push(React.createElement(Confetti, {\n          confettiClass: 'confetti-' + i,\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }));\n        i--;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, Confettis);\n  }\n\n  function activeClass(index) {\n    let string;\n    string = isFlipped.includes(index) ? '-isFlipped' : winPairs.includes(idCards[index]) ? '-isWin' : '_bg-white';\n    return string;\n  }\n\n  function timerStatus(status) {\n    let click = 0;\n\n    if (click === 0) {\n      setTimeActive(status);\n    }\n\n    click++;\n  }\n\n  const renderCards = () => {\n    const Images = renderImg(imagesArray, numberCard);\n\n    for (let i = 0; i < numberCard; i++) {\n      // Si au moment ou je click sur le bouton (call de flipCard(i) qui change isFlipped) c'est le meme chiffre que i, alors...\n      Cards.push(React.createElement(Card, {\n        flipClass: activeClass(i),\n        key: i,\n        \"data-js-id\": idCards[i],\n        onClick: () => {\n          setIsFlipped([...isFlipped, i]);\n          setCurrentPair([...currentPair, idCards[i].toString()]);\n          timerStatus(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, Images[idCards[i]]));\n    }\n\n    return React.createElement(Layout, {\n      col: 4,\n      spacing: \"_p-xxs\",\n      desktopLayout: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, Cards);\n  }; // const displayWinSentence = (type:any) =>{\n  //     return saveScore[indexLevel] ? saveScore[indexLevel].type === count ? '_block ' : '_hidden' : \"_hidden\"\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"memory-bg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, renderConfetti(), React.createElement(\"div\", {\n    className: \"_rounded-small _border _border-solid _border-primary _mt-md _mx-md _justify-around _hidden lg:_flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    isActive: activeTab,\n    toogleTab: () => {\n      setPannelLeft(true);\n      return !activeTab ? setActiveTab(!activeTab) : null;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, \"Options\")), React.createElement(Tab, {\n    isActive: !activeTab,\n    toogleTab: () => {\n      setPannelLeft(false);\n      return activeTab ? setActiveTab(!activeTab) : null;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }, \"Jouer\"))), React.createElement(Container, {\n    maxWidth: \"991px\",\n    isCenteredX: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _px-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"_mr-md lg:_mr-none _my-xl _w-full \".concat(pannelLeft ? '_block' : 'lg:_hidden '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_bg-darkenprimary _rounded-small \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"_text-center _text-white _m-none _pt-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \"Th\\xE8me\"), renderThemeBtns()), React.createElement(\"div\", {\n    className: \"_bg-white _rounded-small _mt-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"_text-center _text-primary _m-none _pt-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }, \"Niveau de difficult\\xE9\"), renderLevelBtns()), React.createElement(\"div\", {\n    className: \"_bg-darkenprimary _mt-sm _rounded-small \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"_text-center _text-white _m-none _pt-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, \"Score\"), React.createElement(\"span\", {\n    className: \"_text-center _text-white _block _mt-xxs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, '(' + numberCard + ' cartes)'), React.createElement(\"div\", {\n    className: \"_flex _justify-center _py-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_m-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _items-center _mb-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: memoryTime,\n    className: \"_h-full _w-lg _mr-xs\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"_text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, \"Temps\")), React.createElement(\"div\", {\n    className: \"_flex _justify-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344\n    },\n    __self: this\n  }, React.createElement(ScoreClick, {\n    isIcon: true,\n    iconPosition: \"left\",\n    count: saveScore[indexLevel] ? TimeFormat(saveScore[indexLevel].time) : '00:00',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"_m-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _items-center _mb-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: memoryClick,\n    className: \"_h-full _w-lg _mr-xs\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"_text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357\n    },\n    __self: this\n  }, \"Clics\")), React.createElement(\"div\", {\n    className: \"_flex _justify-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }, React.createElement(ScoreClick, {\n    isIcon: true,\n    iconPosition: \"left\",\n    count: saveScore[indexLevel] ? saveScore[indexLevel].click : '00',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  })))))), React.createElement(\"section\", {\n    className: \"_flex _flex-col _w-full \".concat(pannelLeft === false ? '_block' : 'lg:_hidden', \" _items-center _relative _my-xl\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_mx-xxs _flex _justify-between _w-full _items-center _text-white _pb-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _items-center \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375\n    },\n    __self: this\n  }, \"Temps : \"), React.createElement(\"span\", {\n    className: \"_text-xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376\n    },\n    __self: this\n  }, \" \", TimeFormat(seconds))), React.createElement(\"div\", {\n    className: \"_flex _items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"_mr-xxs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379\n    },\n    __self: this\n  }, \"Clics :\"), React.createElement(\"span\", {\n    className: \"_text-xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380\n    },\n    __self: this\n  }, count))), React.createElement(\"div\", {\n    className: \"_flex _items-center _justify-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }, React.createElement(Popup, {\n    title: \"Partie termin\\xE9e\",\n    displayPopup: isModlaHide,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \" _text-golden \".concat(saveScore[indexLevel] ? saveScore[indexLevel].click === count ? '_block ' : '_hidden' : \"_hidden\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385\n    },\n    __self: this\n  }, \"Nouveaux record de clics\"), React.createElement(\"span\", {\n    className: \" _text-golden \".concat(saveScore[indexLevel] ? saveScore[indexLevel].time === seconds ? '_block ' : '_hidden' : \"_hidden\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }, \"Nouveaux record de temps\"), React.createElement(\"div\", {\n    className: \"_bg-darkenprimary _rounded-small _w-3/4 _mt-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _flex-wrap _justify-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_m-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _items-center \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: memoryTime,\n    className: \"_h-full _w-lg _mr-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"_text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  }, \"Temps\")), React.createElement(\"span\", {\n    className: \"_text-xl _text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  }, \" \", TimeFormat(seconds)), React.createElement(\"div\", {\n    className: \"_flex _justify-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395\n    },\n    __self: this\n  }, React.createElement(ScoreClick, {\n    isIcon: true,\n    iconPosition: \"left\",\n    count: saveScore[indexLevel] ? TimeFormat(saveScore[indexLevel].time) : '00:00',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"_m-xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"_flex _items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: memoryClick,\n    className: \"_h-full _w-lg _mr-xs\",\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"_text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410\n    },\n    __self: this\n  }, \"Clics\")), React.createElement(\"span\", {\n    className: \"_text-xl _text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412\n    },\n    __self: this\n  }, count), React.createElement(\"div\", {\n    className: \"_flex _justify-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413\n    },\n    __self: this\n  }, React.createElement(ScoreClick, {\n    isIcon: true,\n    iconPosition: \"left\",\n    count: saveScore[indexLevel] ? saveScore[indexLevel].click : '00',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414\n    },\n    __self: this\n  }))))), React.createElement(\"section\", {\n    className: \"_mt-xs _w-full _flex _justify-end _relative _b-none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"_text-primary _bg-white _m-xs _rounded-md _py-xs _px-sm _border-none _cursor-pointer\",\n    onClick: () => reset(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428\n    },\n    __self: this\n  }, \"Rejouer\")))), renderCards())))));\n};\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/dev7/Desktop/Outils/memory2.0/src/Main.tsx"],"names":["React","useState","useEffect","useContext","memoryImages","Button","Card","Confetti","ScoreClick","Popup","Container","Layout","Tab","useScoreTimer","TimeFormat","TimerContext","Main","numbers","themes","fruits_legumes","medical","meteo","sommeil","sport","numberCard","setNumberCard","isFlipped","setIsFlipped","winPairs","setWinPairs","idCards","setIdCards","images","setImages","imagesArray","setImagesArray","currentPair","setCurrentPair","count","setCount","timeActive","setTimeActive","saveScore","setSaveScore","isModlaHide","setIsModlaHide","findIndex","index","level","indexLevel","setIndexLevel","timerInterval","undefined","seconds","setSeconds","setMinutes","activeTab","setActiveTab","pannelLeft","setPannelLeft","Cards","length","i","push","shuffle","toString","split","concat","setTimeout","timerStatus","tempSaveScore","click","splice","time","reset","toggleClass","renderImg","changetheme","value","renderLevelBtns","Buttons","map","number","renderThemeBtns","ButtonsTheme","Object","keys","key","categorie","Img","urlArray","values","slice","array","renderConfetti","Confettis","activeClass","string","includes","status","renderCards","Images","memoryTime","memoryClick"],"mappings":"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","sourcesContent":["//HOOKS\r\nimport React, { useState, useEffect, useContext } from 'react';\r\n\r\n//ASSETS\r\nimport memoryImages from './assets/images.json';\r\nimport memoryClick from './assets/memory/clics.svg';\r\nimport memoryTime from './assets/memory/time.svg';\r\n\r\n//COMPONENTS\r\nimport { Button, Card, Confetti, ScoreClick, Popup, Container, Layout, Tab } from './components';\r\n\r\n//SVG COOMPONENTS\r\n// import { starSvg } from './components/svg';\r\n\r\n\r\n//TYPES\r\nimport memoryType from './type/memoryType';\r\n\r\n//STYLE\r\nimport './styles/tailwind.css';\r\nimport './styles/memory.scss';\r\nimport './styles/confetti.scss';\r\n\r\n//LOGICS\r\nimport useScoreTimer from './logics/useScoreTimer';\r\n\r\n//UTILS\r\nimport TimeFormat from './utils/TimeFormat';\r\n\r\n//UseContext\r\nimport { TimerContext } from './context/TimerContext';\r\n\r\nconst Main = () => {\r\n    let numbers = [12, 16, 20, 24, 28];\r\n    let themes = {\r\n        fruits_legumes: 'Fruit et Légumes',\r\n        medical: 'Médical',\r\n        meteo: 'Météo',\r\n        sommeil: 'Sommeil',\r\n        sport: 'Sport',\r\n    };\r\n\r\n    const [numberCard, setNumberCard] = useState<number>(numbers[0]);\r\n    const [isFlipped, setIsFlipped] = useState<number[]>([]);\r\n    const [winPairs, setWinPairs] = useState<any[]>([]);\r\n    const [idCards, setIdCards] = useState<any>([]);\r\n    const [images, setImages] = useState<any>(themes.fruits_legumes);\r\n    const [imagesArray, setImagesArray] = useState<any>(memoryImages.fruits_legumes);\r\n    const [currentPair, setCurrentPair] = useState<string[]>([]);\r\n    const [count, setCount] = useState<number>(0);\r\n    const [timeActive, setTimeActive] = useState<boolean>(false);\r\n    const [saveScore, setSaveScore] = useState<memoryType[] | any>([]);\r\n    const [isModlaHide, setIsModlaHide] = useState<boolean>(true);\r\n    const [indexLevel, setIndexLevel] = useState<number>(saveScore.findIndex((index) => index.level === numberCard));\r\n\r\n    let timerInterval: NodeJS.Timeout | undefined = undefined;\r\n    const { seconds } = useScoreTimer(timeActive, timerInterval);\r\n    const { setSeconds, setMinutes } = useContext(TimerContext);\r\n\r\n    const [activeTab, setActiveTab] = useState<boolean>(true);\r\n    const [pannelLeft, setPannelLeft] = useState<boolean>(true);\r\n\r\n    const Cards: JSX.Element[] = [];\r\n\r\n    /**\r\n     * UseEffect sert ici à obsever le changment de idCards, uniquement si il y a eu un changement au niveau de numberCard\r\n     * Array d'ids en fonction du nombre de cards et shuffle\r\n     */\r\n    useEffect(() => {\r\n        setIdCards((idCards.length = 0));\r\n\r\n        for (let i = 0; i < numberCard / 2; i++) {\r\n            setIdCards(idCards.push(i));\r\n        }\r\n        setIdCards(idCards.push(...idCards));\r\n        setIdCards(shuffle(idCards));\r\n        setIdCards(idCards.toString().split(','));\r\n    }, [numberCard, imagesArray]);\r\n\r\n    /**\r\n     * Check la concordance des deux cards selectionnées\r\n     */\r\n    useEffect(() => {\r\n        if (isFlipped.length > 2) {\r\n            setIsFlipped([]);\r\n        }\r\n\r\n        if (currentPair.length === 2 && isFlipped[0] !== isFlipped[1]) {\r\n            setCount(count + 1);\r\n            if (currentPair[0] === currentPair[1]) {\r\n                setWinPairs(winPairs.concat(currentPair));\r\n                setCurrentPair([]);\r\n                setIsFlipped([]);\r\n            } else {\r\n                setCurrentPair([]);\r\n                setTimeout(() => {\r\n                    setIsFlipped([]);\r\n                }, 500);\r\n            }\r\n        } else if (currentPair.length > 2) {\r\n            setCurrentPair([]);\r\n        } else if (isFlipped[0] === isFlipped[1]) {\r\n            setCurrentPair([]);\r\n        }\r\n    }, [isFlipped]);\r\n\r\n    useEffect(() => {\r\n        if (winPairs.length === numberCard) {\r\n            setIsModlaHide(false);\r\n            timerStatus(false); // Arrete le Timer\r\n\r\n            if (indexLevel !== -1) {\r\n                // La, on créer un \"saveScore\" temporaire en lui passant les nouvelle valeurs qui viennent d'être joué. Pour ensuite comparer saveScore et tempSaveScore\r\n                const tempSaveScore: any[] = [...saveScore];\r\n\r\n                if (count < saveScore[indexLevel].click) {\r\n                    /*Ici, on dit a tempSaveScore -> à l'élement de indexLevel (ici 12) tu vas suprimer 1 element, et le remplacer par \r\n                    l'objet tempSaveScore à l'indexLevel dont la valeur click cahnge pour le nouveau count (il changer automatiquement pour la nouvel clé \"click\").\r\n                    */\r\n                    tempSaveScore.splice(indexLevel, 1, { ...tempSaveScore[indexLevel], click: count });\r\n                }\r\n                if (seconds < saveScore[indexLevel].time) {\r\n                    tempSaveScore.splice(indexLevel, 1, { ...tempSaveScore[indexLevel], time: seconds });\r\n                }\r\n                if (count < saveScore[indexLevel].click || seconds < saveScore[indexLevel].time)\r\n                    setSaveScore(tempSaveScore);\r\n            } else {\r\n                setSaveScore([...saveScore, { level: numberCard, click: count, time: seconds }]);\r\n            }\r\n        }\r\n    }, [winPairs]);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(saveScore)\r\n    // }, [saveScore]);\r\n\r\n    useEffect(() => {\r\n        setIndexLevel(saveScore.findIndex((index) => index.level === numberCard));\r\n    }, [reset]);\r\n\r\n    function toggleClass(index: number) {\r\n        setNumberCard(numbers[index]);\r\n        renderImg(imagesArray, numbers[index]);\r\n    }\r\n\r\n    function changetheme(value: string) {\r\n        setImagesArray(memoryImages[value]);\r\n        renderImg(imagesArray, numberCard);\r\n    }\r\n\r\n    function reset() {\r\n        setWinPairs([]);\r\n        setIsFlipped([]);\r\n        setCurrentPair([]);\r\n        setCount(0);\r\n        setSeconds(0);\r\n        setMinutes(0);\r\n        setIsModlaHide(true);\r\n    }\r\n\r\n    function renderLevelBtns() {\r\n        const Buttons: JSX.Element[] = [];\r\n        numbers &&\r\n            numbers.map((number, index) => {\r\n                Buttons.push(\r\n                    <Button\r\n                        key={index}\r\n                        label={'cartes'}\r\n                        number={number}\r\n                        activeClass={\r\n                            numberCard === numbers[index] ? '_bg-primary _text-white' : '_text-primary _border-primary'\r\n                        }\r\n                        onClick={() => {\r\n                            toggleClass(index);\r\n                            reset();\r\n                        }}\r\n                    />\r\n                );\r\n            });\r\n        return <div className=\"_flex _flex-wrap _justify-center _px-md _py-sm _rounded-small\">{Buttons}</div>;\r\n    }\r\n\r\n    function renderThemeBtns() {\r\n        const ButtonsTheme: JSX.Element[] = [];\r\n        Object.keys(themes).map((key, value) => {\r\n            ButtonsTheme.push(\r\n                <Button\r\n                    key={key}\r\n                    label={themes[key]}\r\n                    activeClass={images === themes[key] ? '_bg-white _text-primary' : '_text-white _border-white'}\r\n                    onClick={() => {\r\n                        setImages(themes[key]);\r\n                        changetheme(Object.keys(themes)[value]);\r\n                        reset();\r\n                    }}\r\n                />\r\n            );\r\n        });\r\n        return <div className=\"_flex _justify-center _px-md _py-sm _rounded-small _flex-wrap\">{ButtonsTheme}</div>;\r\n    }\r\n\r\n    /**\r\n     * Permet de rendre  par categorie la moitié d'un nombre d'image définie.\r\n     * @param categorie\r\n     * @param number\r\n     */\r\n    function renderImg(categorie: any, number: number) {\r\n        const Img: JSX.Element[] = [];\r\n        let urlArray: string[] = Object.values(categorie);\r\n        for (let index = 0; index < number / 2; index++) {\r\n            Img.push(<img className=\"_h-full\" src={urlArray[index]} key={'image-' + index} alt=\"ok\"></img>);\r\n        }\r\n        return Img.slice(0, number / 2);\r\n    }\r\n\r\n    /**\r\n     * Permet de randomize la position des valeurs dans le tableau\r\n     * @param {Array} array\r\n     */\r\n    function shuffle(array) {\r\n        // let counter = array.length;\r\n\r\n        // // While there are elements in the array\r\n        // while (counter > 0) {\r\n        //     // Pick a random index\r\n        //     let index = Math.floor(Math.random() * counter);\r\n\r\n        //     // Decrease counter by 1\r\n        //     counter--;\r\n\r\n        //     // And swap the last element with it\r\n        //     let temp = array[counter];\r\n        //     array[counter] = array[index];\r\n        //     array[index] = temp;\r\n        // }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Animation confetti lors du remplissage de la victoire de l'utilisateur\r\n     */\r\n    function renderConfetti() {\r\n        const Confettis: JSX.Element[] = [];\r\n        let i = 300;\r\n\r\n        if (winPairs.length === numberCard) {\r\n            while (i > -1) {\r\n                Confettis.push(<Confetti confettiClass={'confetti-' + i} key={i}></Confetti>);\r\n                i--;\r\n            }\r\n        }\r\n\r\n        return <React.Fragment>{Confettis}</React.Fragment>;\r\n    }\r\n\r\n    function activeClass(index) {\r\n        let string: string;\r\n        string = isFlipped.includes(index) ? '-isFlipped' : winPairs.includes(idCards[index]) ? '-isWin' : '_bg-white';\r\n        return string;\r\n    }\r\n\r\n    function timerStatus(status: boolean) {\r\n        let click = 0;\r\n        if (click === 0) {\r\n            setTimeActive(status);\r\n        }\r\n        click++;\r\n    }\r\n\r\n    const renderCards = () => {\r\n        const Images: any = renderImg(imagesArray, numberCard);\r\n\r\n        for (let i = 0; i < numberCard; i++) {\r\n            // Si au moment ou je click sur le bouton (call de flipCard(i) qui change isFlipped) c'est le meme chiffre que i, alors...\r\n            Cards.push(\r\n                <Card\r\n                    flipClass={activeClass(i)}\r\n                    key={i}\r\n                    data-js-id={idCards[i]}\r\n                    onClick={() => {\r\n                        setIsFlipped([...isFlipped, i]);\r\n                        setCurrentPair([...currentPair, idCards[i].toString()]);\r\n                        timerStatus(true);\r\n                    }}>\r\n                    {Images[idCards[i]]}\r\n                </Card>\r\n            );\r\n        }\r\n        return (\r\n            <Layout col={4} spacing=\"_p-xxs\" desktopLayout>\r\n                {Cards}\r\n            </Layout>\r\n        );\r\n    };\r\n\r\n    // const displayWinSentence = (type:any) =>{\r\n    //     return saveScore[indexLevel] ? saveScore[indexLevel].type === count ? '_block ' : '_hidden' : \"_hidden\"\r\n    // }\r\n\r\n    return (\r\n        <div className=\"memory-bg\">\r\n            {renderConfetti()}\r\n            <div className=\"_rounded-small _border _border-solid _border-primary _mt-md _mx-md _justify-around _hidden lg:_flex\">\r\n                <Tab\r\n                    isActive={activeTab}\r\n                    toogleTab={() => {\r\n                        setPannelLeft(true);\r\n                        return !activeTab ? setActiveTab(!activeTab) : null;\r\n                    }}>\r\n                    <span>Options</span>\r\n                </Tab>\r\n                <Tab\r\n                    isActive={!activeTab}\r\n                    toogleTab={() => {\r\n                        setPannelLeft(false);\r\n                        return activeTab ? setActiveTab(!activeTab) : null;\r\n                    }}>\r\n                    <span>Jouer</span>\r\n                </Tab>\r\n            </div>\r\n            <Container maxWidth=\"991px\" isCenteredX>\r\n\r\n                <div className=\"_flex _px-sm\">\r\n                    <section className={`_mr-md lg:_mr-none _my-xl _w-full ${pannelLeft ? '_block' : 'lg:_hidden '}`}>\r\n                        <div className=\"_bg-darkenprimary _rounded-small \">\r\n                            <h2 className=\"_text-center _text-white _m-none _pt-sm\">Thème</h2>\r\n                            {renderThemeBtns()}\r\n                        </div>\r\n                        <div className=\"_bg-white _rounded-small _mt-sm\">\r\n                            <h2 className=\"_text-center _text-primary _m-none _pt-sm\">Niveau de difficulté</h2>\r\n                            {renderLevelBtns()}\r\n                        </div>\r\n                        <div className=\"_bg-darkenprimary _mt-sm _rounded-small \">\r\n                            <h2 className=\"_text-center _text-white _m-none _pt-sm\">Score</h2>\r\n                            <span className=\"_text-center _text-white _block _mt-xxs\">\r\n                                {'(' + numberCard + ' cartes)'}\r\n                            </span>\r\n                            <div className=\"_flex _justify-center _py-xs\">\r\n                                <div className=\"_m-xs\">\r\n                                    <div className=\"_flex _items-center _mb-xs\">\r\n                                        <img src={memoryTime} className=\"_h-full _w-lg _mr-xs\" alt=\"\" />\r\n                                        <span className=\"_text-white\">Temps</span>\r\n                                    </div>\r\n                                    <div className=\"_flex _justify-start\">\r\n                                        <ScoreClick\r\n                                            isIcon\r\n                                            iconPosition=\"left\"\r\n                                            count={\r\n                                                saveScore[indexLevel] ? TimeFormat(saveScore[indexLevel].time) : '00:00'\r\n                                            }></ScoreClick>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"_m-xs\">\r\n                                    <div className=\"_flex _items-center _mb-xs\">\r\n                                        <img src={memoryClick} className=\"_h-full _w-lg _mr-xs\" alt=\"\" />\r\n                                        <span className=\"_text-white\">Clics</span>\r\n                                    </div>\r\n                                    <div className=\"_flex _justify-start\">\r\n                                        <ScoreClick\r\n                                            isIcon\r\n                                            iconPosition=\"left\"\r\n                                            count={\r\n                                                saveScore[indexLevel] ? saveScore[indexLevel].click : '00'\r\n                                            }></ScoreClick>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section className={`_flex _flex-col _w-full ${pannelLeft === false ? '_block' : 'lg:_hidden'} _items-center _relative _my-xl`}>\r\n                        <div className=\"_mx-xxs _flex _justify-between _w-full _items-center _text-white _pb-xs\">\r\n                            <div className=\"_flex _items-center \">\r\n                                <span>Temps : </span>\r\n                                <span className=\"_text-xl\"> {TimeFormat(seconds)}</span>\r\n                            </div>\r\n                            <div className=\"_flex _items-center\">\r\n                                <span className=\"_mr-xxs\">Clics :</span>\r\n                                <span className=\"_text-xl\">{count}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"_flex _items-center _justify-center\">\r\n                            <Popup title=\"Partie terminée\" displayPopup={isModlaHide}>\r\n                                <span className={` _text-golden ${saveScore[indexLevel] ? saveScore[indexLevel].click === count ? '_block ' : '_hidden' : \"_hidden\"}`}>Nouveaux record de clics</span>\r\n                                <span className={` _text-golden ${saveScore[indexLevel] ? saveScore[indexLevel].time === seconds ? '_block ' : '_hidden' : \"_hidden\"}`}>Nouveaux record de temps</span>\r\n                                <div className=\"_bg-darkenprimary _rounded-small _w-3/4 _mt-xs\">\r\n                                    <div className=\"_flex _flex-wrap _justify-around\">\r\n                                        <div className=\"_m-xs\">\r\n                                            <div className=\"_flex _items-center \">\r\n                                                <img src={memoryTime} className=\"_h-full _w-lg _mr-xs\"/>\r\n                                                <span className=\"_text-white\">Temps</span>\r\n                                            </div>\r\n                                            <span className=\"_text-xl _text-white\"> {TimeFormat(seconds)}</span>\r\n                                            <div className=\"_flex _justify-start\">\r\n                                                <ScoreClick\r\n                                                    isIcon\r\n                                                    iconPosition=\"left\"\r\n                                                    count={\r\n                                                        saveScore[indexLevel]\r\n                                                            ? TimeFormat(saveScore[indexLevel].time)\r\n                                                            : '00:00'\r\n                                                    }></ScoreClick>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"_m-xs\">\r\n                                            <div className=\"_flex _items-center\">\r\n                                                <img src={memoryClick} className=\"_h-full _w-lg _mr-xs\" alt=\"\" />\r\n                                                <span className=\"_text-white\">Clics</span>\r\n                                            </div>\r\n                                            <span className=\"_text-xl _text-white\">{count}</span>\r\n                                            <div className=\"_flex _justify-start\">\r\n                                                <ScoreClick\r\n                                                    isIcon\r\n                                                    iconPosition=\"left\"\r\n                                                    count={\r\n                                                        saveScore[indexLevel] ? saveScore[indexLevel].click : '00'\r\n                                                    }></ScoreClick>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <section className=\"_mt-xs _w-full _flex _justify-end _relative _b-none\">\r\n                                    <button\r\n                                        className=\"_text-primary _bg-white _m-xs _rounded-md _py-xs _px-sm _border-none _cursor-pointer\"\r\n                                        onClick={() => reset()}>\r\n                                        <span>Rejouer</span>\r\n                                    </button>\r\n                                </section>\r\n                            </Popup>\r\n                            {renderCards()}\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}